{
  "address": "0xD7B8B9704131F612c49f64436493563Fb31d9091",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_f3Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "F3TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientF3Balance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExchangeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "USDCTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "ConsultPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "f3Amount",
          "type": "uint256"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "MintingPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "service",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "consultPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "f3Token",
      "outputs": [
        {
          "internalType": "contract F3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentReceiptId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payForConsult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payForMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_f3Token",
          "type": "address"
        }
      ],
      "name": "setF3Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consultPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "setUSDCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59dfe0c69d93b86ad25f510d9aebf0316a49a9abb1009a6e2335fde947c784b0",
  "receipt": {
    "to": null,
    "from": "0x7EFcDfCe9fA9D8AcBB3B047B30db2D22146BFC0E",
    "contractAddress": "0xD7B8B9704131F612c49f64436493563Fb31d9091",
    "transactionIndex": 8,
    "gasUsed": "885371",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000100000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000080000000000400000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000100000000000000000000000000000000000000800000000000000000000",
    "blockHash": "0x7085a9a2ac647ed304c0c3a980dfd559b548c0179b1b14f8d6cdf20737fa40b4",
    "transactionHash": "0x59dfe0c69d93b86ad25f510d9aebf0316a49a9abb1009a6e2335fde947c784b0",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 24044180,
        "transactionHash": "0x59dfe0c69d93b86ad25f510d9aebf0316a49a9abb1009a6e2335fde947c784b0",
        "address": "0xD7B8B9704131F612c49f64436493563Fb31d9091",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007efcdfce9fa9d8acbb3b047b30db2d22146bfc0e"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x7085a9a2ac647ed304c0c3a980dfd559b548c0179b1b14f8d6cdf20737fa40b4"
      }
    ],
    "blockNumber": 24044180,
    "cumulativeGasUsed": "4368900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC5380e64127f79Df8c27384c22f2dbCb43f00551",
    "0x9782B21Ae05d7ef65217159c7CCf4b5A379BfbE0"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e5d7cec604f35077bd11332a69af3aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"F3TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientF3Balance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USDCTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"ConsultPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"f3Amount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"MintingPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"service\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"f3Token\",\"outputs\":[{\"internalType\":\"contract F3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentReceiptId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payForConsult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payForMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f3Token\",\"type\":\"address\"}],\"name\":\"setF3Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consultPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles USDC to F3 token exchanges and payment services for consultation and minting\",\"events\":{\"ConsultPaid(address,uint256)\":{\"params\":{\"receiptId\":\"Unique identifier for the payment receipt\",\"user\":\"Address of the user making the payment\"}},\"Exchange(address,uint256,uint256)\":{\"params\":{\"f3Amount\":\"Amount of F3 tokens received\",\"usdcAmount\":\"Amount of USDC tokens exchanged\",\"user\":\"Address of the user performing the exchange\"}},\"MintingPaid(address,uint256)\":{\"params\":{\"receiptId\":\"Unique identifier for the payment receipt\",\"user\":\"Address of the user making the payment\"}},\"PriceUpdated(string,uint256)\":{\"params\":{\"newPrice\":\"New price in F3 tokens\",\"service\":\"Name of the service (consult/minting)\"}},\"Withdraw(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens withdrawn\",\"to\":\"Address receiving the tokens\",\"token\":\"Address of the token being withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_f3Token\":\"Address of the F3 token contract\",\"_usdcToken\":\"Address of the USDC token contract\"}},\"exchange(uint256)\":{\"params\":{\"usdcAmount\":\"Amount of USDC tokens to exchange\"}},\"getCurrentReceiptId()\":{\"returns\":{\"_0\":\"Current value of the receipt ID counter\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payForConsult()\":{\"returns\":{\"_0\":\"Receipt ID for the payment\"}},\"payForMinting()\":{\"returns\":{\"_0\":\"Receipt ID for the payment\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchangeRate(uint256)\":{\"params\":{\"_rate\":\"New exchange rate (1 USDC = _rate F3)\"}},\"setF3Token(address)\":{\"params\":{\"_f3Token\":\"New address of the F3 token contract\"}},\"setPrices(uint256,uint256)\":{\"params\":{\"_consultPrice\":\"New price for consultation in F3 tokens\",\"_mintingPrice\":\"New price for minting in F3 tokens\"}},\"setUSDCToken(address)\":{\"params\":{\"_usdcToken\":\"New address of the USDC token contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to withdraw\",\"to\":\"Address to receive the tokens\",\"token\":\"Address of the token to withdraw\"}}},\"title\":\"CounterService\",\"version\":1},\"userdoc\":{\"events\":{\"ConsultPaid(address,uint256)\":{\"notice\":\"Emitted when a consultation payment is made\"},\"Exchange(address,uint256,uint256)\":{\"notice\":\"Emitted when USDC is exchanged for F3 tokens\"},\"MintingPaid(address,uint256)\":{\"notice\":\"Emitted when a minting payment is made\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"Emitted when service prices are updated\"},\"Withdraw(address,address,uint256)\":{\"notice\":\"Emitted when tokens are withdrawn from the contract\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the contract with token addresses and default values\"},\"consultPrice()\":{\"notice\":\"Price in F3 tokens for consultation service\"},\"exchange(uint256)\":{\"notice\":\"Exchanges USDC tokens for F3 tokens\"},\"exchangeRate()\":{\"notice\":\"Exchange rate for USDC to F3 conversion (1 USDC = exchangeRate F3)\"},\"f3Token()\":{\"notice\":\"Address of the F3 token contract\"},\"getCurrentReceiptId()\":{\"notice\":\"Returns the current receipt ID\"},\"mintingPrice()\":{\"notice\":\"Price in F3 tokens for minting service\"},\"payForConsult()\":{\"notice\":\"Pays for consultation service with F3 tokens\"},\"payForMinting()\":{\"notice\":\"Pays for minting service with F3 tokens\"},\"setExchangeRate(uint256)\":{\"notice\":\"Updates the exchange rate for USDC to F3 conversion\"},\"setF3Token(address)\":{\"notice\":\"Updates the F3 token contract address\"},\"setPrices(uint256,uint256)\":{\"notice\":\"Updates the prices for consultation and minting services\"},\"setUSDCToken(address)\":{\"notice\":\"Updates the USDC token contract address\"},\"usdcToken()\":{\"notice\":\"Address of the USDC token contract\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraws tokens from the contract\"}},\"notice\":\"A service contract for managing token exchanges and payments\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/CounterService.sol\":\"CounterService\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/CounterService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { F3 } from \\\"../tokens/F3.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror InvalidExchangeRate();\\nerror USDCTransferFailed();\\nerror F3TransferFailed();\\nerror InsufficientF3Balance();\\nerror InvalidPrice();\\nerror WithdrawFailed();\\n\\n/// @title CounterService\\n/// @notice A service contract for managing token exchanges and payments\\n/// @dev Handles USDC to F3 token exchanges and payment services for consultation and minting\\ncontract CounterService is Ownable, ReentrancyGuard {\\n  /// @notice Emitted when USDC is exchanged for F3 tokens\\n  /// @param user Address of the user performing the exchange\\n  /// @param usdcAmount Amount of USDC tokens exchanged\\n  /// @param f3Amount Amount of F3 tokens received\\n  event Exchange(address indexed user, uint256 usdcAmount, uint256 f3Amount);\\n\\n  /// @notice Emitted when a consultation payment is made\\n  /// @param user Address of the user making the payment\\n  /// @param receiptId Unique identifier for the payment receipt\\n  event ConsultPaid(address indexed user, uint256 receiptId);\\n\\n  /// @notice Emitted when a minting payment is made\\n  /// @param user Address of the user making the payment\\n  /// @param receiptId Unique identifier for the payment receipt\\n  event MintingPaid(address indexed user, uint256 receiptId);\\n\\n  /// @notice Emitted when service prices are updated\\n  /// @param service Name of the service (consult/minting)\\n  /// @param newPrice New price in F3 tokens\\n  event PriceUpdated(string service, uint256 newPrice);\\n\\n  /// @notice Emitted when tokens are withdrawn from the contract\\n  /// @param token Address of the token being withdrawn\\n  /// @param to Address receiving the tokens\\n  /// @param amount Amount of tokens withdrawn\\n  event Withdraw(address indexed token, address indexed to, uint256 amount);\\n\\n  /// @notice Address of the F3 token contract\\n  F3 public f3Token;\\n\\n  /// @notice Address of the USDC token contract\\n  IERC20 public usdcToken;\\n\\n  /// @notice Exchange rate for USDC to F3 conversion (1 USDC = exchangeRate F3)\\n  uint256 public exchangeRate;\\n\\n  /// @notice Internal counter for generating unique receipt IDs\\n  uint256 private _receiptId;\\n\\n  /// @notice Price in F3 tokens for consultation service\\n  uint256 public consultPrice;\\n\\n  /// @notice Price in F3 tokens for minting service\\n  uint256 public mintingPrice;\\n\\n  /// @notice Initializes the contract with token addresses and default values\\n  /// @param _f3Token Address of the F3 token contract\\n  /// @param _usdcToken Address of the USDC token contract\\n  constructor(address _f3Token, address _usdcToken) {\\n    f3Token = F3(_f3Token);\\n    usdcToken = IERC20(_usdcToken);\\n    exchangeRate = 10; // Default 1:10 rate\\n    _receiptId = 0;\\n    consultPrice = 1 ether; // Default 1 F3 token\\n    mintingPrice = 1 ether; // Default 1 F3 token\\n  }\\n\\n  /// @notice Returns the current receipt ID\\n  /// @return Current value of the receipt ID counter\\n  function getCurrentReceiptId() public view returns (uint256) {\\n    return _receiptId;\\n  }\\n\\n  /// @notice Updates the F3 token contract address\\n  /// @param _f3Token New address of the F3 token contract\\n  function setF3Token(address _f3Token) external onlyOwner {\\n    f3Token = F3(_f3Token);\\n  }\\n\\n  /// @notice Updates the USDC token contract address\\n  /// @param _usdcToken New address of the USDC token contract\\n  function setUSDCToken(address _usdcToken) external onlyOwner {\\n    usdcToken = IERC20(_usdcToken);\\n  }\\n\\n  /// @notice Updates the exchange rate for USDC to F3 conversion\\n  /// @param _rate New exchange rate (1 USDC = _rate F3)\\n  function setExchangeRate(uint256 _rate) external onlyOwner {\\n    if (_rate == 0) revert InvalidExchangeRate();\\n    exchangeRate = _rate;\\n  }\\n\\n  /// @notice Updates the prices for consultation and minting services\\n  /// @param _consultPrice New price for consultation in F3 tokens\\n  /// @param _mintingPrice New price for minting in F3 tokens\\n  function setPrices(uint256 _consultPrice, uint256 _mintingPrice) external onlyOwner {\\n    if (_consultPrice == 0 || _mintingPrice == 0) revert InvalidPrice();\\n    consultPrice = _consultPrice;\\n    mintingPrice = _mintingPrice;\\n    emit PriceUpdated(\\\"consult\\\", _consultPrice);\\n    emit PriceUpdated(\\\"minting\\\", _mintingPrice);\\n  }\\n\\n  /// @notice Withdraws tokens from the contract\\n  /// @param token Address of the token to withdraw\\n  /// @param to Address to receive the tokens\\n  /// @param amount Amount of tokens to withdraw\\n  function withdraw(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external onlyOwner nonReentrant {\\n    if (amount == 0) revert InvalidPrice();\\n    if (!IERC20(token).transfer(to, amount)) revert WithdrawFailed();\\n    emit Withdraw(token, to, amount);\\n  }\\n\\n  /// @notice Exchanges USDC tokens for F3 tokens\\n  /// @param usdcAmount Amount of USDC tokens to exchange\\n  function exchange(uint256 usdcAmount) external {\\n    // Transfer USDC from the caller to this contract\\n    if (!usdcToken.transferFrom(msg.sender, address(this), usdcAmount)) revert USDCTransferFailed();\\n\\n    // Calculate F3 amount based on exchange rate\\n    uint256 f3Amount = usdcAmount * exchangeRate;\\n\\n    // Mint F3 tokens to the caller\\n    f3Token.mint(msg.sender, f3Amount);\\n\\n    emit Exchange(msg.sender, usdcAmount, f3Amount);\\n  }\\n\\n  /// @notice Pays for consultation service with F3 tokens\\n  /// @return Receipt ID for the payment\\n  function payForConsult() external nonReentrant returns (uint256) {\\n    if (f3Token.balanceOf(msg.sender) < consultPrice) revert InsufficientF3Balance();\\n\\n    if (!f3Token.transferFrom(msg.sender, address(this), consultPrice)) revert F3TransferFailed();\\n\\n    _receiptId++;\\n    emit ConsultPaid(msg.sender, _receiptId);\\n    return _receiptId;\\n  }\\n\\n  /// @notice Pays for minting service with F3 tokens\\n  /// @return Receipt ID for the payment\\n  function payForMinting() external nonReentrant returns (uint256) {\\n    if (f3Token.balanceOf(msg.sender) < mintingPrice) revert InsufficientF3Balance();\\n\\n    if (!f3Token.transferFrom(msg.sender, address(this), mintingPrice)) revert F3TransferFailed();\\n\\n    _receiptId++;\\n    emit MintingPaid(msg.sender, _receiptId);\\n    return _receiptId;\\n  }\\n}\\n\",\"keccak256\":\"0x46e2ff998a26bcc3811bf7343de18aaf571a91febdadd781189c06a276fe0328\",\"license\":\"MIT\"},\"contracts/tokens/F3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract F3 is ERC20, Ownable {\\n  constructor() ERC20(\\\"F3 Token\\\", \\\"F3\\\") {\\n    mint(_msgSender(), 1000000 ether);\\n  }\\n\\n  function mint(address to, uint256 amount) public {\\n    _mint(to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xde143dea65852b63bedc80652891c4177fe3b65a88c0ae8dafc6f4c46684cd62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d4a380380610d4a83398101604081905261002f916100f4565b61003833610088565b60018055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055600a6004556000600555670de0b6b3a76400006006819055600755610127565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100ef57600080fd5b919050565b6000806040838503121561010757600080fd5b610110836100d8565b915061011e602084016100d8565b90509250929050565b610c14806101366000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806381aedac1116100a2578063d9caed1211610071578063d9caed12146101ea578063db068e0e146101fd578063e05c041d14610210578063f2fde38b14610218578063f9b454b51461022b57600080fd5b806381aedac1146101b65780638da5cb5b146101be57806393cd7924146101cf578063b5e62249146101d757600080fd5b80633ba0b9a9116100de5780633ba0b9a91461017f578063535565591461018857806358a958e71461019b578063715018a6146101ae57600080fd5b806305fefda7146101105780630f5a9d011461012557806311eac8551461013857806335db70b514610168575b600080fd5b61012361011e366004610aa0565b610234565b005b610123610133366004610ade565b610312565b60035461014b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017160075481565b60405190815260200161015f565b61017160045481565b610123610196366004610b00565b61033c565b60025461014b906001600160a01b031681565b610123610488565b600554610171565b6000546001600160a01b031661014b565b61017161049c565b6101236101e5366004610ade565b61062e565b6101236101f8366004610b19565b610658565b61012361020b366004610b00565b610773565b6101716107a1565b610123610226366004610ade565b61091f565b61017160065481565b61023c61099d565b811580610247575080155b156102645760405162bfc92160e01b815260040160405180910390fd5b6006829055600781815560408051818152808201929092526618dbdb9cdd5b1d60ca1b606083015260208201849052517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f49181900360800190a160408051818152600781830152666d696e74696e6760c81b60608201526020810183905290517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f49181900360800190a15050565b61031a61099d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610b55565b6103d45760405163a55b288760e01b815260040160405180910390fd5b6000600454826103e49190610b8d565b6002546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561043157600080fd5b505af1158015610445573d6000803e3d6000fd5b505060408051858152602081018590523393507f26981b9aefbb0f732b0264bd34c255e831001eb50b06bc85b32cc39e1438972192500160405180910390a25050565b61049061099d565b61049a60006109f7565b565b60006104a6610a47565b6006546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610bac565b101561053457604051633540763960e21b815260040160405180910390fd5b6002546006546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190610b55565b6105d057604051635501ea3160e01b815260040160405180910390fd5b600580549060006105e083610bc5565b909155505060055460405190815233907f12b19d7009204c23ccd823dd501dfb62d36e89fd8de324546f07649ebf26bb3c906020015b60405180910390a25060055461062b60018055565b90565b61063661099d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61066061099d565b610668610a47565b806000036106885760405162bfc92160e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610b55565b61071857604051631d42c86760e21b815260040160405180910390fd5b816001600160a01b0316836001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161075d91815260200190565b60405180910390a361076e60018055565b505050565b61077b61099d565b8060000361079c5760405163a2ec3a5560e01b815260040160405180910390fd5b600455565b60006107ab610a47565b6007546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190610bac565b101561083957604051633540763960e21b815260040160405180910390fd5b6002546007546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190610b55565b6108d557604051635501ea3160e01b815260040160405180910390fd5b600580549060006108e583610bc5565b909155505060055460405190815233907f1a11c88a5d61618079bc3e405f135ba106edb7142983f62ed98b625b1d949b2290602001610616565b61092761099d565b6001600160a01b0381166109915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61099a816109f7565b50565b6000546001600160a01b0316331461049a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610988565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610a995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610988565b6002600155565b60008060408385031215610ab357600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610ad957600080fd5b919050565b600060208284031215610af057600080fd5b610af982610ac2565b9392505050565b600060208284031215610b1257600080fd5b5035919050565b600080600060608486031215610b2e57600080fd5b610b3784610ac2565b9250610b4560208501610ac2565b9150604084013590509250925092565b600060208284031215610b6757600080fd5b81518015158114610af957600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610ba757610ba7610b77565b500290565b600060208284031215610bbe57600080fd5b5051919050565b600060018201610bd757610bd7610b77565b506001019056fea2646970667358221220d38c6fdf4b2f7844794c86bf3f8f7cbf321aa1ef01dd4c6e349f703c75252b8b64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806381aedac1116100a2578063d9caed1211610071578063d9caed12146101ea578063db068e0e146101fd578063e05c041d14610210578063f2fde38b14610218578063f9b454b51461022b57600080fd5b806381aedac1146101b65780638da5cb5b146101be57806393cd7924146101cf578063b5e62249146101d757600080fd5b80633ba0b9a9116100de5780633ba0b9a91461017f578063535565591461018857806358a958e71461019b578063715018a6146101ae57600080fd5b806305fefda7146101105780630f5a9d011461012557806311eac8551461013857806335db70b514610168575b600080fd5b61012361011e366004610aa0565b610234565b005b610123610133366004610ade565b610312565b60035461014b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61017160075481565b60405190815260200161015f565b61017160045481565b610123610196366004610b00565b61033c565b60025461014b906001600160a01b031681565b610123610488565b600554610171565b6000546001600160a01b031661014b565b61017161049c565b6101236101e5366004610ade565b61062e565b6101236101f8366004610b19565b610658565b61012361020b366004610b00565b610773565b6101716107a1565b610123610226366004610ade565b61091f565b61017160065481565b61023c61099d565b811580610247575080155b156102645760405162bfc92160e01b815260040160405180910390fd5b6006829055600781815560408051818152808201929092526618dbdb9cdd5b1d60ca1b606083015260208201849052517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f49181900360800190a160408051818152600781830152666d696e74696e6760c81b60608201526020810183905290517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f49181900360800190a15050565b61031a61099d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b79190610b55565b6103d45760405163a55b288760e01b815260040160405180910390fd5b6000600454826103e49190610b8d565b6002546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561043157600080fd5b505af1158015610445573d6000803e3d6000fd5b505060408051858152602081018590523393507f26981b9aefbb0f732b0264bd34c255e831001eb50b06bc85b32cc39e1438972192500160405180910390a25050565b61049061099d565b61049a60006109f7565b565b60006104a6610a47565b6006546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190610bac565b101561053457604051633540763960e21b815260040160405180910390fd5b6002546006546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190610b55565b6105d057604051635501ea3160e01b815260040160405180910390fd5b600580549060006105e083610bc5565b909155505060055460405190815233907f12b19d7009204c23ccd823dd501dfb62d36e89fd8de324546f07649ebf26bb3c906020015b60405180910390a25060055461062b60018055565b90565b61063661099d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61066061099d565b610668610a47565b806000036106885760405162bfc92160e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610b55565b61071857604051631d42c86760e21b815260040160405180910390fd5b816001600160a01b0316836001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8360405161075d91815260200190565b60405180910390a361076e60018055565b505050565b61077b61099d565b8060000361079c5760405163a2ec3a5560e01b815260040160405180910390fd5b600455565b60006107ab610a47565b6007546002546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190610bac565b101561083957604051633540763960e21b815260040160405180910390fd5b6002546007546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b89190610b55565b6108d557604051635501ea3160e01b815260040160405180910390fd5b600580549060006108e583610bc5565b909155505060055460405190815233907f1a11c88a5d61618079bc3e405f135ba106edb7142983f62ed98b625b1d949b2290602001610616565b61092761099d565b6001600160a01b0381166109915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61099a816109f7565b50565b6000546001600160a01b0316331461049a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610988565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610a995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610988565b6002600155565b60008060408385031215610ab357600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610ad957600080fd5b919050565b600060208284031215610af057600080fd5b610af982610ac2565b9392505050565b600060208284031215610b1257600080fd5b5035919050565b600080600060608486031215610b2e57600080fd5b610b3784610ac2565b9250610b4560208501610ac2565b9150604084013590509250925092565b600060208284031215610b6757600080fd5b81518015158114610af957600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610ba757610ba7610b77565b500290565b600060208284031215610bbe57600080fd5b5051919050565b600060018201610bd757610bd7610b77565b506001019056fea2646970667358221220d38c6fdf4b2f7844794c86bf3f8f7cbf321aa1ef01dd4c6e349f703c75252b8b64736f6c634300080e0033",
  "devdoc": {
    "details": "Handles USDC to F3 token exchanges and payment services for consultation and minting",
    "events": {
      "ConsultPaid(address,uint256)": {
        "params": {
          "receiptId": "Unique identifier for the payment receipt",
          "user": "Address of the user making the payment"
        }
      },
      "Exchange(address,uint256,uint256)": {
        "params": {
          "f3Amount": "Amount of F3 tokens received",
          "usdcAmount": "Amount of USDC tokens exchanged",
          "user": "Address of the user performing the exchange"
        }
      },
      "MintingPaid(address,uint256)": {
        "params": {
          "receiptId": "Unique identifier for the payment receipt",
          "user": "Address of the user making the payment"
        }
      },
      "PriceUpdated(string,uint256)": {
        "params": {
          "newPrice": "New price in F3 tokens",
          "service": "Name of the service (consult/minting)"
        }
      },
      "Withdraw(address,address,uint256)": {
        "params": {
          "amount": "Amount of tokens withdrawn",
          "to": "Address receiving the tokens",
          "token": "Address of the token being withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_f3Token": "Address of the F3 token contract",
          "_usdcToken": "Address of the USDC token contract"
        }
      },
      "exchange(uint256)": {
        "params": {
          "usdcAmount": "Amount of USDC tokens to exchange"
        }
      },
      "getCurrentReceiptId()": {
        "returns": {
          "_0": "Current value of the receipt ID counter"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payForConsult()": {
        "returns": {
          "_0": "Receipt ID for the payment"
        }
      },
      "payForMinting()": {
        "returns": {
          "_0": "Receipt ID for the payment"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchangeRate(uint256)": {
        "params": {
          "_rate": "New exchange rate (1 USDC = _rate F3)"
        }
      },
      "setF3Token(address)": {
        "params": {
          "_f3Token": "New address of the F3 token contract"
        }
      },
      "setPrices(uint256,uint256)": {
        "params": {
          "_consultPrice": "New price for consultation in F3 tokens",
          "_mintingPrice": "New price for minting in F3 tokens"
        }
      },
      "setUSDCToken(address)": {
        "params": {
          "_usdcToken": "New address of the USDC token contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "amount": "Amount of tokens to withdraw",
          "to": "Address to receive the tokens",
          "token": "Address of the token to withdraw"
        }
      }
    },
    "title": "CounterService",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ConsultPaid(address,uint256)": {
        "notice": "Emitted when a consultation payment is made"
      },
      "Exchange(address,uint256,uint256)": {
        "notice": "Emitted when USDC is exchanged for F3 tokens"
      },
      "MintingPaid(address,uint256)": {
        "notice": "Emitted when a minting payment is made"
      },
      "PriceUpdated(string,uint256)": {
        "notice": "Emitted when service prices are updated"
      },
      "Withdraw(address,address,uint256)": {
        "notice": "Emitted when tokens are withdrawn from the contract"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the contract with token addresses and default values"
      },
      "consultPrice()": {
        "notice": "Price in F3 tokens for consultation service"
      },
      "exchange(uint256)": {
        "notice": "Exchanges USDC tokens for F3 tokens"
      },
      "exchangeRate()": {
        "notice": "Exchange rate for USDC to F3 conversion (1 USDC = exchangeRate F3)"
      },
      "f3Token()": {
        "notice": "Address of the F3 token contract"
      },
      "getCurrentReceiptId()": {
        "notice": "Returns the current receipt ID"
      },
      "mintingPrice()": {
        "notice": "Price in F3 tokens for minting service"
      },
      "payForConsult()": {
        "notice": "Pays for consultation service with F3 tokens"
      },
      "payForMinting()": {
        "notice": "Pays for minting service with F3 tokens"
      },
      "setExchangeRate(uint256)": {
        "notice": "Updates the exchange rate for USDC to F3 conversion"
      },
      "setF3Token(address)": {
        "notice": "Updates the F3 token contract address"
      },
      "setPrices(uint256,uint256)": {
        "notice": "Updates the prices for consultation and minting services"
      },
      "setUSDCToken(address)": {
        "notice": "Updates the USDC token contract address"
      },
      "usdcToken()": {
        "notice": "Address of the USDC token contract"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraws tokens from the contract"
      }
    },
    "notice": "A service contract for managing token exchanges and payments",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 959,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "f3Token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(F3)1401"
      },
      {
        "astId": 963,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "usdcToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 966,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 969,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "_receiptId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 972,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "consultPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 975,
        "contract": "contracts/core/CounterService.sol:CounterService",
        "label": "mintingPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(F3)1401": {
        "encoding": "inplace",
        "label": "contract F3",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}